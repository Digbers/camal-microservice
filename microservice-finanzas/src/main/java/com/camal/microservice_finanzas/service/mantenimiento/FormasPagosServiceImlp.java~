package com.camal.microservice_finanzas.service.mantenimiento;

import com.camal.microservice_finanzas.clients.EmpresaClient;
import com.camal.microservice_finanzas.controller.DTO.FormasPagosDTO;
import com.camal.microservice_finanzas.exception.EmpresaNotFoundException;
import com.camal.microservice_finanzas.persistence.entity.FormasPagosEntity;
import com.camal.microservice_finanzas.persistence.repository.IFormasPagosRepository;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FormasPagosServiceImlp implements IFormasPagosService{
    @Autowired
    private IFormasPagosRepository formasPagosRepository;
    @Autowired
    private EmpresaClient empresaClient;
    @Autowired
    private ModelMapper modelMapper;
    @Override
    public FormasPagosDTO save(FormasPagosDTO formasPagosDTO) {
        Boolean existeEmpresa = empresaClient.verificarEmpresaExiste(formasPagosDTO.getIdEmpresa());
        if (!existeEmpresa) {
            throw new EmpresaNotFoundException("La empresa no existe");
        }
        FormasPagosEntity formasPagos = modelMapper.map(formasPagosDTO, FormasPagosEntity.class);
        formasPagosRepository.save(formasPagos);
        return modelMapper.map(formasPagos, FormasPagosDTO.class);
    }

    @Override
    public FormasPagosDTO findById(String id) {
        FormasPagosEntity formasPagos = formasPagosRepository.findById(id).orElseThrow(() -> new RuntimeException("Forma de pago no encontrada"));
        return modelMapper.map(formasPagos, FormasPagosDTO.class);
    }

    @Override
    public boolean deleteById(Long id) {
        return false;
    }

    @Override
    public FormasPagosDTO update(Long id, FormasPagosDTO formasPagosDTO) {
        return null;
    }

    @Override
    public List<FormasPagosDTO> findByIdEmpresa(Long idEmpresa) {
        return List.of();
    }

    @Override
    public List<FormasPagosDTO> findAll() {
        return List.of();
    }
}
